affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: nodegroup
          operator: In
          values:
          - production-pipeline

autoscaling:
  enabled: true
  maxReplicas: 8
  minReplicas: 1
  targetCPUUtilizationPercentage: 60

configYaml:
  enabled: true
  FEATURE_FLAGS:
    RUN_CONESEARCH: true
    USE_PROFILING: true
    USE_PSQL: true
    PROMETHEUS: false
  MONGO_SECRET_NAME: mongodb-alerts-production-writer
  PSQL_SECRET_NAME: "psql-alerts-production/alerce"
  CONSUMER_CONFIG:
    CLASS: "apf.consumers.KafkaConsumer"
    SCHEMA_PATH: "/schemas/ztf/alert.avsc"
    TOPICS: ["ztf"]
    PARAMS:
      bootstrap.servers: ${kafka_server}
      group.id: "sorting-hat-ztf"
      auto.offset.reset: "beginning"
      enable.partition.eof: false
      security.protocol: "SASL_SSL"
      sasl.mechanism: "SCRAM-SHA-512"
      sasl.username: ${kafka_username}
      sasl.password: ${kafka_password}
    consume.timeout: 10
    consume.messages: 100
  PRODUCER_CONFIG:
    PARAMS:
      bootstrap.servers: ${kafka_server}
      security.protocol: "SASL_SSL"
      sasl.mechanism: "SCRAM-SHA-512"
      sasl.username: ${kafka_username}
      sasl.password: ${kafka_password}
      message.max.bytes: 6291456
    CLASS: "apf.producers.kafka.KafkaSchemalessProducer"
    TOPIC: "sorting-hat"
    SCHEMA_PATH: "/schemas/sorting_hat_step/output.avsc"
  METRICS_CONFIG:
    CLASS: "apf.metrics.KafkaMetricsProducer"
    PARAMS:
      PARAMS:
        bootstrap.servers: ${kafka_server}
        security.protocol: "SASL_SSL"
        sasl.mechanism: "SCRAM-SHA-512"
        sasl.username: ${kafka_username}
        sasl.password: ${kafka_password}
      TOPIC: "metrics"
      SCHEMA_PATH: "/schemas/sorting_hat_step/metrics.json"
  LOGGING_DEBUG: false
  PYROSCOPE_SERVER: "http://pyroscope.pyroscope:4040"

envVariables:
  - name: CONFIG_FROM_YAML
    value: "yes"
  - name: METRICS_SOURCE
    value: sorting-hat-ztf
  - name: METRICS_SURVEY
    value: ZTF

imageCredentials:
  password: ${ghcr_password}
  registry: ghcr.io
  username: ${ghcr_username}

namespace: sorting-hat-ztf

resources:
  requests:
    cpu: 150m
    memory: 128Mi

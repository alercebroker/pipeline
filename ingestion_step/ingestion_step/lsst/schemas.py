import pandas as pd


DType = (
    pd.Int32Dtype
    | pd.Int64Dtype
    | pd.Float32Dtype
    | pd.Float64Dtype
    | pd.BooleanDtype
    | pd.StringDtype
)

dia_forced_source_schema: dict[str, DType] = {
    "diaForcedSourceId": pd.Int64Dtype(),
    "diaObjectId": pd.Int64Dtype(),
    "ra": pd.Float64Dtype(),
    "dec": pd.Float64Dtype(),
    "visit": pd.Int64Dtype(),
    "detector": pd.Int32Dtype(),
    "psfFlux": pd.Float32Dtype(),
    "psfFluxErr": pd.Float32Dtype(),
    "midpointMjdTai": pd.Float64Dtype(),
    "scienceFlux": pd.Float32Dtype(),
    "scienceFluxErr": pd.Float32Dtype(),
    "band": pd.StringDtype(),
    "time_processed": pd.Int64Dtype(),
}

dia_source_schema: dict[str, DType] = {
    "diaSourceId": pd.Int64Dtype(),
    "visit": pd.Int64Dtype(),
    "detector": pd.Int32Dtype(),
    "diaObjectId": pd.Int64Dtype(),
    "ssObjectId": pd.Int64Dtype(),
    "parentDiaSourceId": pd.Int64Dtype(),
    "midpointMjdTai": pd.Float64Dtype(),
    "ra": pd.Float64Dtype(),
    "raErr": pd.Float32Dtype(),
    "dec": pd.Float64Dtype(),
    "decErr": pd.Float32Dtype(),
    "ra_dec_Cov": pd.Float32Dtype(),
    "x": pd.Float32Dtype(),
    "xErr": pd.Float32Dtype(),
    "y": pd.Float32Dtype(),
    "yErr": pd.Float32Dtype(),
    "centroid_flag": pd.BooleanDtype(),
    "apFlux": pd.Float32Dtype(),
    "apFluxErr": pd.Float32Dtype(),
    "apFlux_flag": pd.BooleanDtype(),
    "apFlux_flag_apertureTruncated": pd.BooleanDtype(),
    "isNegative": pd.BooleanDtype(),
    "snr": pd.Float32Dtype(),
    "psfFlux": pd.Float32Dtype(),
    "psfFluxErr": pd.Float32Dtype(),
    "psfLnL": pd.Float32Dtype(),
    "psfChi2": pd.Float32Dtype(),
    "psfNdata": pd.Int32Dtype(),
    "psfFlux_flag": pd.BooleanDtype(),
    "psfFlux_flag_edge": pd.BooleanDtype(),
    "psfFlux_flag_noGoodPixels": pd.BooleanDtype(),
    "trailFlux": pd.Float32Dtype(),
    "trailFluxErr": pd.Float32Dtype(),
    "trailRa": pd.Float64Dtype(),
    "trailRaErr": pd.Float32Dtype(),
    "trailDec": pd.Float64Dtype(),
    "trailDecErr": pd.Float32Dtype(),
    "trailLength": pd.Float32Dtype(),
    "trailLengthErr": pd.Float32Dtype(),
    "trailAngle": pd.Float32Dtype(),
    "trailAngleErr": pd.Float32Dtype(),
    "trailChi2": pd.Float32Dtype(),
    "trailNdata": pd.Int32Dtype(),
    "trail_flag_edge": pd.BooleanDtype(),
    "dipoleMeanFlux": pd.Float32Dtype(),
    "dipoleMeanFluxErr": pd.Float32Dtype(),
    "dipoleFluxDiff": pd.Float32Dtype(),
    "dipoleFluxDiffErr": pd.Float32Dtype(),
    "dipoleLength": pd.Float32Dtype(),
    "dipoleAngle": pd.Float32Dtype(),
    "dipoleChi2": pd.Float32Dtype(),
    "dipoleNdata": pd.Int32Dtype(),
    "scienceFlux": pd.Float32Dtype(),
    "scienceFluxErr": pd.Float32Dtype(),
    "forced_PsfFlux_flag": pd.BooleanDtype(),
    "forced_PsfFlux_flag_edge": pd.BooleanDtype(),
    "forced_PsfFlux_flag_noGoodPixels": pd.BooleanDtype(),
    "templateFlux": pd.Float32Dtype(),
    "templateFluxErr": pd.Float32Dtype(),
    "ixx": pd.Float32Dtype(),
    "iyy": pd.Float32Dtype(),
    "ixy": pd.Float32Dtype(),
    "ixxPSF": pd.Float32Dtype(),
    "iyyPSF": pd.Float32Dtype(),
    "ixyPSF": pd.Float32Dtype(),
    "shape_flag": pd.BooleanDtype(),
    "shape_flag_no_pixels": pd.BooleanDtype(),
    "shape_flag_not_contained": pd.BooleanDtype(),
    "shape_flag_parent_source": pd.BooleanDtype(),
    "extendedness": pd.Float32Dtype(),
    "reliability": pd.Float32Dtype(),
    "band": pd.StringDtype(),
    "isDipole": pd.BooleanDtype(),
    "dipoleFitAttempted": pd.BooleanDtype(),
    "time_processed": pd.Int64Dtype(),
    "bboxSize": pd.Int64Dtype(),
    "pixelFlags": pd.BooleanDtype(),
    "pixelFlags_bad": pd.BooleanDtype(),
    "pixelFlags_cr": pd.BooleanDtype(),
    "pixelFlags_crCenter": pd.BooleanDtype(),
    "pixelFlags_edge": pd.BooleanDtype(),
    "pixelFlags_nodata": pd.BooleanDtype(),
    "pixelFlags_nodataCenter": pd.BooleanDtype(),
    "pixelFlags_interpolated": pd.BooleanDtype(),
    "pixelFlags_interpolatedCenter": pd.BooleanDtype(),
    "pixelFlags_offimage": pd.BooleanDtype(),
    "pixelFlags_saturated": pd.BooleanDtype(),
    "pixelFlags_saturatedCenter": pd.BooleanDtype(),
    "pixelFlags_suspect": pd.BooleanDtype(),
    "pixelFlags_suspectCenter": pd.BooleanDtype(),
    "pixelFlags_streak": pd.BooleanDtype(),
    "pixelFlags_streakCenter": pd.BooleanDtype(),
    "pixelFlags_injected": pd.BooleanDtype(),
    "pixelFlags_injectedCenter": pd.BooleanDtype(),
    "pixelFlags_injected_template": pd.BooleanDtype(),
    "pixelFlags_injected_templateCenter": pd.BooleanDtype(),
    "glint_trail": pd.BooleanDtype(),
}

ss_source_schema: dict[str, DType] = {
    "ssObjectId": pd.Int64Dtype(),
    "diaSourceId": pd.Int64Dtype(),
    "eclipticLambda": pd.Float64Dtype(),
    "eclipticBeta": pd.Float64Dtype(),
    "galacticL": pd.Float64Dtype(),
    "galacticB": pd.Float64Dtype(),
    "phaseAngle": pd.Float32Dtype(),
    "heliocentricDist": pd.Float32Dtype(),
    "topocentricDist": pd.Float32Dtype(),
    "predictedVMagnitude": pd.Float32Dtype(),
    "residualRa": pd.Float64Dtype(),
    "residualDec": pd.Float64Dtype(),
    "heliocentricX": pd.Float32Dtype(),
    "heliocentricY": pd.Float32Dtype(),
    "heliocentricZ": pd.Float32Dtype(),
    "heliocentricVX": pd.Float32Dtype(),
    "heliocentricVY": pd.Float32Dtype(),
    "heliocentricVZ": pd.Float32Dtype(),
    "topocentricX": pd.Float32Dtype(),
    "topocentricY": pd.Float32Dtype(),
    "topocentricZ": pd.Float32Dtype(),
    "topocentricVX": pd.Float32Dtype(),
    "topocentricVY": pd.Float32Dtype(),
    "topocentricVZ": pd.Float32Dtype(),
}

dia_object_schema: dict[str, DType] = {
    "diaObjectId": pd.Int64Dtype(),
    "validityStart": pd.Int64Dtype(),
    "ra": pd.Float64Dtype(),
    "raErr": pd.Float32Dtype(),
    "dec": pd.Float64Dtype(),
    "decErr": pd.Float32Dtype(),
    "ra_dec_Cov": pd.Float32Dtype(),
    "u_psfFluxMean": pd.Float32Dtype(),
    "u_psfFluxMeanErr": pd.Float32Dtype(),
    "u_psfFluxSigma": pd.Float32Dtype(),
    "u_psfFluxChi2": pd.Float32Dtype(),
    "u_psfFluxNdata": pd.Int32Dtype(),
    "u_fpFluxMean": pd.Float32Dtype(),
    "u_fpFluxMeanErr": pd.Float32Dtype(),
    "g_psfFluxMean": pd.Float32Dtype(),
    "g_psfFluxMeanErr": pd.Float32Dtype(),
    "g_psfFluxSigma": pd.Float32Dtype(),
    "g_psfFluxChi2": pd.Float32Dtype(),
    "g_psfFluxNdata": pd.Int32Dtype(),
    "g_fpFluxMean": pd.Float32Dtype(),
    "g_fpFluxMeanErr": pd.Float32Dtype(),
    "r_psfFluxMean": pd.Float32Dtype(),
    "r_psfFluxMeanErr": pd.Float32Dtype(),
    "r_psfFluxSigma": pd.Float32Dtype(),
    "r_psfFluxChi2": pd.Float32Dtype(),
    "r_psfFluxNdata": pd.Int32Dtype(),
    "r_fpFluxMean": pd.Float32Dtype(),
    "r_fpFluxMeanErr": pd.Float32Dtype(),
    "i_psfFluxMean": pd.Float32Dtype(),
    "i_psfFluxMeanErr": pd.Float32Dtype(),
    "i_psfFluxSigma": pd.Float32Dtype(),
    "i_psfFluxChi2": pd.Float32Dtype(),
    "i_psfFluxNdata": pd.Int32Dtype(),
    "i_fpFluxMean": pd.Float32Dtype(),
    "i_fpFluxMeanErr": pd.Float32Dtype(),
    "z_psfFluxMean": pd.Float32Dtype(),
    "z_psfFluxMeanErr": pd.Float32Dtype(),
    "z_psfFluxSigma": pd.Float32Dtype(),
    "z_psfFluxChi2": pd.Float32Dtype(),
    "z_psfFluxNdata": pd.Int32Dtype(),
    "z_fpFluxMean": pd.Float32Dtype(),
    "z_fpFluxMeanErr": pd.Float32Dtype(),
    "y_psfFluxMean": pd.Float32Dtype(),
    "y_psfFluxMeanErr": pd.Float32Dtype(),
    "y_psfFluxSigma": pd.Float32Dtype(),
    "y_psfFluxChi2": pd.Float32Dtype(),
    "y_psfFluxNdata": pd.Int32Dtype(),
    "y_fpFluxMean": pd.Float32Dtype(),
    "y_fpFluxMeanErr": pd.Float32Dtype(),
    "u_scienceFluxMean": pd.Float32Dtype(),
    "u_scienceFluxMeanErr": pd.Float32Dtype(),
    "u_scienceFluxSigma": pd.Float32Dtype(),
    "g_scienceFluxMean": pd.Float32Dtype(),
    "g_scienceFluxMeanErr": pd.Float32Dtype(),
    "g_scienceFluxSigma": pd.Float32Dtype(),
    "r_scienceFluxMean": pd.Float32Dtype(),
    "r_scienceFluxMeanErr": pd.Float32Dtype(),
    "r_scienceFluxSigma": pd.Float32Dtype(),
    "i_scienceFluxMean": pd.Float32Dtype(),
    "i_scienceFluxMeanErr": pd.Float32Dtype(),
    "i_scienceFluxSigma": pd.Float32Dtype(),
    "z_scienceFluxMean": pd.Float32Dtype(),
    "z_scienceFluxMeanErr": pd.Float32Dtype(),
    "z_scienceFluxSigma": pd.Float32Dtype(),
    "y_scienceFluxMean": pd.Float32Dtype(),
    "y_scienceFluxMeanErr": pd.Float32Dtype(),
    "y_scienceFluxSigma": pd.Float32Dtype(),
    "u_psfFluxSkew": pd.Float32Dtype(),
    "u_psfFluxMin": pd.Float32Dtype(),
    "u_psfFluxMax": pd.Float32Dtype(),
    "u_psfFluxMaxSlope": pd.Float32Dtype(),
    "u_psfFluxErrMean": pd.Float32Dtype(),
    "g_psfFluxSkew": pd.Float32Dtype(),
    "g_psfFluxMin": pd.Float32Dtype(),
    "g_psfFluxMax": pd.Float32Dtype(),
    "g_psfFluxMaxSlope": pd.Float32Dtype(),
    "g_psfFluxErrMean": pd.Float32Dtype(),
    "r_psfFluxSkew": pd.Float32Dtype(),
    "r_psfFluxMin": pd.Float32Dtype(),
    "r_psfFluxMax": pd.Float32Dtype(),
    "r_psfFluxMaxSlope": pd.Float32Dtype(),
    "r_psfFluxErrMean": pd.Float32Dtype(),
    "i_psfFluxSkew": pd.Float32Dtype(),
    "i_psfFluxMin": pd.Float32Dtype(),
    "i_psfFluxMax": pd.Float32Dtype(),
    "i_psfFluxMaxSlope": pd.Float32Dtype(),
    "i_psfFluxErrMean": pd.Float32Dtype(),
    "z_psfFluxSkew": pd.Float32Dtype(),
    "z_psfFluxMin": pd.Float32Dtype(),
    "z_psfFluxMax": pd.Float32Dtype(),
    "z_psfFluxMaxSlope": pd.Float32Dtype(),
    "z_psfFluxErrMean": pd.Float32Dtype(),
    "y_psfFluxSkew": pd.Float32Dtype(),
    "y_psfFluxMin": pd.Float32Dtype(),
    "y_psfFluxMax": pd.Float32Dtype(),
    "y_psfFluxMaxSlope": pd.Float32Dtype(),
    "y_psfFluxErrMean": pd.Float32Dtype(),
    "firstDiaSourceMjdTai": pd.Float64Dtype(),
    "lastDiaSourceMjdTai": pd.Float64Dtype(),
    "nDiaSources": pd.Int32Dtype(),
}

mpcorb_schema: dict[str, DType] = {
    "mpcDesignation": pd.StringDtype(),
    "ssObjectId": pd.Int64Dtype(),
    "mpcH": pd.Float32Dtype(),
    "epoch": pd.Float64Dtype(),
    "M": pd.Float64Dtype(),
    "peri": pd.Float64Dtype(),
    "node": pd.Float64Dtype(),
    "incl": pd.Float64Dtype(),
    "e": pd.Float64Dtype(),
    "a": pd.Float64Dtype(),
    "q": pd.Float64Dtype(),
    "t_p": pd.Float64Dtype(),
}

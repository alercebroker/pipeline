name: Tests

on:
  pull_request:
    branches:
      - main

jobs:
  detect_changes:
    uses: ./.github/workflows/detect_changes.yaml

  reflector_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.reflector_step == 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
        sources-folder: 'reflector_step'
        base-folder: 'reflector_step'
  reflector_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.reflector_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
        python-version: '3.7'
        sources-folder: 'reflector_step'
        test-folder: 'tests/unittest'
        base-folder: 'reflector_step'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  reflector_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.reflector_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      python-version: '3.7'
      sources-folder: 'reflector_step'
      base-folder: 'reflector_step'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  reflector_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.reflector_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "reflector_step"
      step-name: "reflector_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'


  alert_archiving_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.alert_archiving_step == 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
        sources-folder: 'alert_archiving_step'
        base-folder: 'alert_archiving_step'
  alert_archiving_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.alert_archiving_step == 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      python-version: '3.7'
      base-folder: 'alert_archiving_step'
      sources-folder: 'alert_archiving_step'
      test-folder: 'tests/unittest'
      test-dependencies: 'pytest pytest-docker pytest-cov numpy fastavro'
      test-command: 'python -m pytest -x tests/unittest --cov alert_archiving_step --cov-report xml'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  alert_archiving_step_unittest_cli:
    needs: detect_changes
    if: needs.detect_changes.outputs.alert_archiving_step == 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      python-version: '3.7'
      base-folder: 'alert_archiving_step'
      test-dependencies: 'pytest pytest-docker pytest-cov'
      requirements-file: 'requirements_cli.txt'
      test-command: 'python -m pytest -x tests/cli --cov cli --cov-report xml'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  alert_archiving_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.alert_archiving_step == 'true'    
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      python-version: '3.7'
      base-folder: 'alert_archiving_step'
      sources-folder: 'alert_archiving_step'
      test-folder: 'tests/integration'
      test-dependencies: 'pytest pytest-docker numpy Cython'
      codecov-flags: ''  # Do not upload
      test-command: 'python -m pytest -x tests/integration'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  alert_archiving_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.alert_archiving_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "alert_archiving_step"
      step-name: "alert_archiving_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  correction_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.correction_step == 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      sources-folder: 'correction'
      base-folder: 'correction_step'
  correction_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.correction_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'correction_step'
      sources-folder: 'correction'
      test-folder: 'tests/unittests'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  correction_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.correction_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'correction_step'
      sources-folder: 'correction'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  correction_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.correction_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "correction_step"
      step-name: "correction_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  feature_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.feature_step == 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      sources-folder: 'features'
      base-folder: 'feature_step'
  feature_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.feature_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      python-version: '3.10'
      base-folder: 'feature_step'
      sources-folder: 'features'
      test-folder: 'tests/unittest'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  feature_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.feature_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      python-version: '3.10'
      base-folder: 'feature_step'
      sources-folder: 'features/'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  feature_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.feature_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "feature_step"
      step-name: "feature_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  lc_classification_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.lc_classification_step == 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      base-folder: 'lc_classification_step'
      sources-folder: 'lc_classification'
  lc_classification_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.lc_classification_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'lc_classification_step'
      python-version: '3.8'
      poetry-install: "--with ztf --with elasticc"
      test-folder: "tests/unit"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
      TEST_BALTO_MODEL_PATH: "${{ secrets.TEST_BALTO_MODEL_PATH }}"
      TEST_BALTO_QUANTILES_PATH: "${{ secrets.TEST_BALTO_QUANTILES_PATH }}"
      TEST_MESSI_MODEL_PATH: "${{ secrets.TEST_MESSI_MODEL_PATH }}"
      TEST_MESSI_HEADER_QUANTILES_PATH: "${{ secrets.TEST_MESSI_HEADER_QUANTILES_PATH }}"
      TEST_MESSI_FEATURE_QUANTILES_PATH: "${{ secrets.TEST_MESSI_FEATURE_QUANTILES_PATH }}"
      TEST_TORETTO_MODEL_PATH: "${{ secrets.TEST_TORETTO_MODEL_PATH }}"
      TEST_BARNEY_MODEL_PATH: "${{ secrets.TEST_BARNEY_MODEL_PATH }}"
  lc_classification_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.lc_classification_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'lc_classification_step'
      python-version: '3.8'
      codecov-flags: ''  # Do not upload
      poetry-install: "--with ztf --with elasticc"
      test-folder: "tests/integration"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
      TEST_BALTO_MODEL_PATH: "${{ secrets.TEST_BALTO_MODEL_PATH }}"
      TEST_BALTO_QUANTILES_PATH: "${{ secrets.TEST_BALTO_QUANTILES_PATH }}"
      TEST_MESSI_MODEL_PATH: "${{ secrets.TEST_MESSI_MODEL_PATH }}"
      TEST_MESSI_HEADER_QUANTILES_PATH: "${{ secrets.TEST_MESSI_HEADER_QUANTILES_PATH }}"
      TEST_MESSI_FEATURE_QUANTILES_PATH: "${{ secrets.TEST_MESSI_FEATURE_QUANTILES_PATH }}"
      TEST_TORETTO_MODEL_PATH: "${{ secrets.TEST_TORETTO_MODEL_PATH }}"
      TEST_BARNEY_MODEL_PATH: "${{ secrets.TEST_BARNEY_MODEL_PATH }}"

  lc_classification_step_build_ztf:
    needs: detect_changes
    if: needs.detect_changes.outputs.lc_classification_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "lc_classification_step"
      step-name: "lc_classification_step_ztf"
      file: "Dockerfile-ztf"
    secrets:
      GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
  lc_classification_step_build_balto:
    needs: detect_changes
    if: needs.detect_changes.outputs.lc_classification_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "lc_classification_step"
      step-name: "lc_classification_step_balto"
      file: "Dockerfile-balto"
    secrets:
      GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
  lc_classification_step_build_messi:
    needs: detect_changes
    if: needs.detect_changes.outputs.lc_classification_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "lc_classification_step"
      step-name: "lc_classification_step_messi"
      file: "Dockerfile-messi"
    secrets:
      GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
  lc_classification_step_build_barney:
    needs: detect_changes
    if: needs.detect_changes.outputs.lc_classification_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "lc_classification_step"
      step-name: "lc_classification_step-barney"
      file: "Dockerfile-barney"
    secrets:
      GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
  lc_classification_step_build_toretto:
    needs: detect_changes
    if: needs.detect_changes.outputs.lc_classification_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "lc_classification_step"
      step-name: "lc_classification_step-toretto"
      file: "Dockerfile-toretto"
    secrets:
      GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  lightcurve_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.lightcurve_step == 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      base-folder: 'lightcurve-step' 
      sources-folder: 'lightcurve_step'
  lightcurve_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.lightcurve_step == 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      base-folder: 'lightcurve-step' 
      python-version: "3.9"
      sources-folder: "lightcurve_step"
      test-folder: "tests/unittest"
      test-dependencies: "pytest pytest-cov"
      test-command: "python -m pytest -x tests/unittest --cov lightcurve_step --cov-report xml"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  lightcurve_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.lightcurve_step == 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      base-folder: 'lightcurve-step' 
      python-version: "3.9"
      sources-folder: "lightcurve_step"
      test-folder: "tests/integration"
      test-dependencies: "pytest pytest-docker"
      codecov-flags: "" # Do not upload
      test-command: "python -m pytest -x tests/integration"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  lightcurve_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.lightcurve_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "lightcurve-step"
      step-name: "lightcurve-step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  magstats_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.magstats_step == 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      sources-folder: 'magstats_step'
      base-folder: 'magstats_step' 
  magstats_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.magstats_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'magstats_step' 
      python-version: '3.9'
      sources-folder: 'magstats_step'
      test-folder: 'tests/unittests'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  magstats_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.magstats_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'magstats_step' 
      python-version: '3.9'
      sources-folder: 'magstats_step'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  magstats_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.magstats_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "magstats_step"
      step-name: "magstats_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  prv_candidates_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.prv_candidates_step == 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      base-folder: 'prv_candidates_step' 
      sources-folder: "prv_candidates_step"

  prv_candidates_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.prv_candidates_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'prv_candidates_step'
      python-version: '3.8'
      poetry-install: ""
      test-folder: "tests/unit"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  prv_candidates_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.prv_candidates_step == 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'prv_candidates_step'
      python-version: '3.8'
      codecov-flags: ''  # Do not upload
      poetry-install: ""
      test-folder: "tests/integration"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  prv_candidates_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.prv_candidates_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "prv_candidates_step"
      step-name: "prv_candidates_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  s3_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.s3_step== 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      sources-folder: 's3_step'
      base-folder: 's3_step'
  s3_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.s3_step== 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      base-folder: 's3_step'
      python-version: '3.9'
      sources-folder: 's3_step'
      test-folder: 'tests/unittest'
      test-dependencies: 'pytest pytest-cov'
      test-command: 'python -m pytest -x tests/unittest --cov s3_step --cov-report xml'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  s3_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.s3_step== 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      base-folder: 's3_step'
      python-version: '3.9'
      sources-folder: 's3_step'
      test-folder: 'tests/integration'
      test-dependencies: 'pytest pytest-docker moto'
      codecov-flags: ''  # Do not upload
      test-command: 'python -m pytest -x tests/integration'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  s3_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.s3_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "s3_step"
      step-name: "s3_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  sorting_hat_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.sorting_hat_step== 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      base-folder: 'sorting_hat_step'
      sources-folder: 'sorting_hat_step'
  sorting_hat_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.sorting_hat_step== 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      base-folder: 'sorting_hat_step'
      python-version: '3.8'
      sources-folder: 'sorting_hat_step'
      test-folder: 'tests/unittest'
      test-dependencies: "pytest pytest-cov 'moto[secretsmanager]'"
      pre-dependencies: 'numpy'
      test-command: 'python -m pytest -x tests/unittest --cov sorting_hat_step --cov-report xml'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  sorting_hat_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.sorting_hat_step== 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      base-folder: 'sorting_hat_step'
      python-version: '3.8'
      sources-folder: 'sorting_hat_step'
      test-folder: 'tests/integration'
      test-dependencies: 'requests confluent_kafka numpy pymongo pytest pytest-docker pytest-cov'
      pre-dependencies: 'numpy'
      codecov-flags: ''  # Do not upload
      test-command: 'python -m pytest -x tests/integration'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  sorting_hat_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.sorting_hat_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "sorting_hat_step"
      step-name: "sorting_hat_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  watchlist_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.watchlist_step== 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      sources-folder: 'watchlist_step'
      base-folder: 'watchlist_step'
  watchlist_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.watchlist_step== 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'watchlist_step'
      python-version: '3.8'
      poetry-install: ''
      test-folder: 'tests/unittest'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  watchlist_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.watchlist_step== 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'watchlist_step'
      python-version: '3.8'
      codecov-flags: ''  # Do not upload
      poetry-install: ''
      test-folder: 'tests/integration'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  watchlist_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.watchlist_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "watchlist_step"
      step-name: "watchlist_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  xmatch_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.xmatch_step== 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      base-folder: 'xmatch_step'
      sources-folder: 'xmatch_step'
  xmatch_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.xmatch_step== 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'xmatch_step'
      python-version: '3.7'
      poetry-install: ''
      test-folder: 'tests/unittest'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  xmatch_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.xmatch_step== 'true'
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'xmatch_step'
      python-version: '3.7'
      codecov-flags: ''  # Do not upload
      poetry-install: ''
      test-folder: 'tests/integration'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  xmatch_step_build:
    needs: detect_changes
    if: needs.detect_changes.outputs.xmatch_step == 'true'
    uses: ./.github/workflows/build-test.yaml
    with:
      base-folder: "xmatch_step"
      step-name: "xmatch_step"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  

  early_classification_step_lint:
    needs: detect_changes
    if: needs.detect_changes.outputs.early_classification_step== 'true'
    uses: ./.github/workflows/lint-template.yaml
    with:
      base-folder: 'early_classification_step'
      sources-folder: 'earlyclassifier'         
  early_classification_step_unittest:
    needs: detect_changes
    if: needs.detect_changes.outputs.early_classification_step== 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      base-folder: 'early_classification_step'
      python-version: '3.7'
      sources-folder: 'earlyclassifier'
      requirements-file: 'requirements.txt -r model/requirements.txt'
      test-folder: 'tests/unittest'
      test-dependencies: 'pytest pytest-cov'
      test-command: 'python -m pytest -x tests/unittest --cov earlyclassifier --cov-report xml'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  early_classification_step_integration:
    needs: detect_changes
    if: needs.detect_changes.outputs.early_classification_step== 'true'
    uses: ./.github/workflows/pip-tests-template.yaml
    with:
      base-folder: 'early_classification_step'
      python-version: '3.7'
      sources-folder: 'earlyclassifier'
      requirements-file: 'requirements.txt -r model/requirements.txt'
      test-folder: 'tests/integration'
      test-dependencies: 'pytest pytest-docker'
      test-command: 'python -m pytest -x tests/integration'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

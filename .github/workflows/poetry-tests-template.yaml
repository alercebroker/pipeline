name: Test with poetry
on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.10'
      poetry-version:
        required: false
        type: string
        default: '1.5.1'
      sources-folder:
        required: false
        type: string
        default: 'src'
      test-folder:
        required: false
        type: string
        default: 'tests'
      codecov-flags:
        required: false
        type: string
        default: 'unittest'
      base-folder:
        required: false
        type: string
        default: '.'
      poetry-install:
        required: false
        type: string
        default: "--all-extras"
    secrets:
      GH_TOKEN:
        required: false
        description: 'A github PAT that enables installation of package from private repo'
      TEST_BALTO_MODEL_PATH:
        required: false
        description: 'A path to a .pt file'
      TEST_BALTO_QUANTILES_PATH:
        required: false
        description: 'A path to the directory containing joblib files for balto'
      TEST_MESSI_MODEL_PATH:
        required: false
        description: 'A path to a .pt file'
      TEST_MESSI_HEADER_QUANTILES_PATH:
        required: false
        description: 'A path to the directory containing joblib files for messi'
      TEST_MESSI_FEATURE_QUANTILES_PATH:
        required: false
        description: 'A path to the directory containing joblib files for messi'
      TEST_TORETTO_MODEL_PATH:
        required: false
        description: 'A path to a .pkl file'
      TEST_BARNEY_MODEL_PATH:
        required: false
        description: 'A path to a .pkl file'
      TEST_NEW_BARNEY_MODEL_PATH:
        required: false
        description: 'A path to a .pkl file'
      TEST_MLP_MODEL_PATH:
        required: false
        description: 'A path to a .pkl file'
      TEST_ANOMALY_QUANTILES_PATH:
        required: false
        description: 'A path to a folder containing .pkl file'
      TEST_ANOMALY_MODEL_PATH:
        required: false
        description: 'A path to a folder containing .pkl file'
      TEST_MBAPPE_MODEL_PATH:
        required: false
        description: 'A path to a folder containing .pkl file'
      TEST_MBAPPE_FEATURE_QUANTILES_PATH:
        required: false
        description: 'A path to a folder containing .pkl file'
      TEST_MBAPPE_HEADER_QUANTILES_PATH:
        required: false
        description: 'A path to a folder containing .pkl file'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TEST_BALTO_MODEL_PATH: ${{ secrets.TEST_BALTO_MODEL_PATH }}
      TEST_BALTO_QUANTILES_PATH: ${{ secrets.TEST_BALTO_QUANTILES_PATH }}
      TEST_MESSI_MODEL_PATH: ${{ secrets.TEST_MESSI_MODEL_PATH }}
      TEST_MESSI_HEADER_QUANTILES_PATH: ${{ secrets.TEST_MESSI_HEADER_QUANTILES_PATH }}
      TEST_MESSI_FEATURE_QUANTILES_PATH: ${{ secrets.TEST_MESSI_FEATURE_QUANTILES_PATH }}
      TEST_TORETTO_MODEL_PATH: ${{ secrets.TEST_TORETTO_MODEL_PATH }}
      TEST_BARNEY_MODEL_PATH: ${{ secrets.TEST_BARNEY_MODEL_PATH }}
      TEST_NEW_BARNEY_MODEL_PATH: ${{ secrets.TEST_NEW_BARNEY_MODEL_PATH }}
      TEST_MLP_MODEL_PATH: ${{ secrets.TEST_MLP_MODEL_PATH }}
      TEST_ANOMALY_QUANTILES_PATH: ${{ secrets.TEST_ANOMALY_QUANTILES_PATH }}
      TEST_ANOMALY_MODEL_PATH: ${{ secrets.TEST_ANOMALY_MODEL_PATH }}
      TEST_MBAPPE_MODEL_PATH: "${{ secrets.TEST_MBAPPE_MODEL_PATH }}"
      TEST_MBAPPE_FEATURE_QUANTILES_PATH: "${{ secrets.TEST_MBAPPE_FEATURE_QUANTILES_PATH }}"
      TEST_MBAPPE_HEADER_QUANTILES_PATH: "${{ secrets.TEST_MBAPPE_HEADER_QUANTILES_PATH }}"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          token: ${{secrets.GH_TOKEN}}
          persist-credentials: false
      - name: Install poetry
        run: |
          pipx install poetry==${{ inputs.poetry-version }}
          poetry --version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install dependencies
        run: |
          cd ${{ inputs.base-folder }}
          poetry install ${{ inputs.poetry-install }}
      - name: Tests with pytest
        run: |
          cd ${{ inputs.base-folder }}
          poetry run pytest -x ${{ inputs.test-folder }} --cov ${{ inputs.sources-folder }} --cov-report xml
      - name: Upload test coverage to Codecov
        if: ${{ inputs.codecov-flags != '' }}
        uses: codecov/codecov-action@v3
        with:
          files: ${{ inputs.base-folder }}/coverage.xml
          flags: ${{ inputs.codecov-flags }}
